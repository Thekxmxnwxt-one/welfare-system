import React, { useState, useEffect } from 'react';
import '../styles/welfareadmin.css';

const API_URL = '/api/v1/welfares';

const WelfareAdmin = () => {
    const [welfares, setAllWelfares] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [newBenefit, setNewBenefit] = useState({
        name: '',
        image: '',
        note: '',
        number: ''
      });
      
      const handleChange = (e) => {
        const { name, value } = e.target;
        setNewBenefit({
          ...newBenefit,
          [name]: value
        });
      };
      
      const addBenefit = async () => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
        if (newBenefit.name && newBenefit.note) {
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ number ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô int ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
          const payload = {
            ...newBenefit,
            number: parseInt(newBenefit.number, 10) || null // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á null
          };
      
          console.log('Payload before sending:', JSON.stringify(payload)); // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
      
          try {
            const response = await fetch(API_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload), // ‡∏™‡πà‡∏á payload ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
            });
      
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            if (!response.ok) {
              const errorDetails = await response.text(); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
              throw new Error(`Network response was not ok: ${errorDetails}`);
            }
      
            const addedBenefit = await response.json();
            setAllWelfares((prevWelfares) => [...prevWelfares, addedBenefit]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô state
            setNewBenefit({ name: '', image: '', note: '', number: '' }); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
          } catch (error) {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£: ' + error.message);
          }
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞! üòÖ');
        }
      };
      

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(API_URL);
        if (!response.ok) {
          console.error('Response status:', response.status);
          throw new Error(`Failed to fetch welfares, status code: ${response.status}`);
        }

        const data = await response.json();
        console.log(data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå
        if (Array.isArray(data)) {
          setAllWelfares(data); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ welfare ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        } else {
          throw new Error('Unexpected data format'); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }

        setLoading(false);
      } catch (error) {
        console.error('Error fetching welfare:', error);
        setError(error.message);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }
  if (error) {
    return <div>Error: {error}</div>;
  }

  const deleteBenefit = async (id) => {
    try {
      const response = await fetch(`${API_URL}/${id}`, {
        method: 'DELETE',
      });
  
      if (!response.ok) {
        const errorDetails = await response.text(); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        throw new Error(`Network response was not ok: ${errorDetails}`);
      }
  
      setAllWelfares((prevWelfares) => prevWelfares.filter((benefit) => benefit.id !== id));
    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£: ' + error.message);
    }
  };
  
  

  return (
    <div className="welfare-admin">
      <h1>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£ üíº</h1>

      <div className="form">
        <input
          type="text"
          name="name"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£"
          //value={newBenefit.name}
          onChange={handleChange}
        />
        <input
          type="text"
          name="image"
          placeholder="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
          //value={newBenefit.image}
          onChange={handleChange}
        />
        <input
          type="text"
          name="note"
          placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
          //value={newBenefit.note}
          onChange={handleChange}
        />
        <input
          type="text"
          name="number"
          placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
          //value={newBenefit.number}
          onChange={handleChange}
        />
        <button onClick={addBenefit}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£ ‚ú®</button>
        
      </div>

      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£ üìù</h2>
      <table>
        <thead>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£</th>
            <th>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {welfares.map((benefit) => (
            <tr key={benefit.id}>
              <td>{benefit.name}</td>
              <td>{benefit.image}</td>
              <td>{benefit.note}</td>
              <td>{benefit.number}</td>
              <td>
              <button onClick={() => deleteBenefit(benefit.id)}>‡∏•‡∏ö</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default WelfareAdmin;
